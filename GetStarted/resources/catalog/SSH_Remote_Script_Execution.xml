<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="SSH_Remote_Script_Execution" projectName="2. Advanced Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="SSH_HOST" value="remote_host" model="PA:NOT_EMPTY_STRING" description="Hostname or IP address of the remote host machine" group="" advanced="false" hidden="false"/>
    <variable name="SSH_PORT" value="22" model="PA:INTEGER" description="The listening port of the SSH server. Default value is 22" advanced="false" hidden="false"/>
    <variable name="SSH_USER" value="my_user" model="PA:NOT_EMPTY_STRING" description="SSH server user name" advanced="false" hidden="false"/>
    <variable name="SSH_PASSWORD" value="my_pwd" model="PA:HIDDEN" description="SSH server password" advanced="false" hidden="false"/>
    <variable name="SSH_PRIVATE_KEY" value="" model="PA:USER_FILE?" description="SSH private key" advanced="false" hidden="false"/>
    <variable name="SSH_CREDENTIAL" value="SSH_PASSWORD" model="PA:LIST(SSH_PASSWORD,SSH_PRIVATE_KEY)" description="Authentication type" advanced="false" hidden="false"/>
    <variable name="SSH_LOCAL_SCRIPT" value="my_script" model="PA:NOT_EMPTY_STRING" description="A relative path of the script to be executed remotely in the User Data Space" advanced="false" hidden="false"/>
    <variable name="SSH_REMOTE_SCRIPT" value="" description="A relative path of copied script in the remote machine. If empty, the remote script name will be identical to the local script name" advanced="false" hidden="false"/>
    <variable name="SSH_CREDENTIAL_HANDLER" value="" model="PA:SPEL(variables[&#39;SSH_CREDENTIAL&#39;] == &#39;SSH_PASSWORD&#39; ? showVar(&#39;SSH_PASSWORD&#39;) &amp;&amp; hideVar(&#39;SSH_PRIVATE_KEY&#39;) : showVar(&#39;SSH_PRIVATE_KEY&#39;) &amp;&amp; hideVar(&#39;SSH_PASSWORD&#39;))" description="SSH credential handler that shows and displays dynamically variables depending on the authentication type" advanced="false" hidden="true"/>
  </variables>
  <description>
    <![CDATA[ A workflow example that executes a script in a remote machine using SSH protocol]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="basic-examples"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="remote_script_execution_with_ssh" 
    
    
    
    
    fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="${SSH_PRIVATE_KEY}" accessMode="transferFromUserSpace"/>
        <files  includes="${SSH_LOCAL_SCRIPT}" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="jsch-0.1.55.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
/**
 * This program will demonstrate remote script execution.
 * You will be asked username, hostname, passwd or SSH private key and script.
 * If everything works fine, given script will be executed
 * on the remote side and outputs will be printed out.
 *
 */
import com.jcraft.jsch.*
import java.io.*

//Get the SSH info to log into the remote machine
sshUser = variables.get("SSH_USER")
sshHost = variables.get("SSH_HOST")
sshPort = variables.get("SSH_PORT") as int
sshCredential = variables.get("SSH_CREDENTIAL")
//Get the local script to be copied then executed on the remote machine
sshLocalFile = variables.get("SSH_LOCAL_SCRIPT")
sshRemoteFile = variables.get("SSH_REMOTE_SCRIPT")
if(sshRemoteFile.isEmpty()){
    sshRemoteFile = sshLocalFile
}

try{
    JSch jsch=new JSch()
    if(sshCredential.equals("SSH_PRIVATE_KEY")){
        jsch.addIdentity(variables.get("SSH_PRIVATE_KEY"))
    }
    Session session=jsch.getSession(sshUser, sshHost, sshPort)
    if(sshCredential.equals("SSH_PASSWORD")){
        session.setPassword(variables.get("SSH_PASSWORD"))
    }
    session.setConfig("StrictHostKeyChecking", "no")
    session.connect()
    println ("The authentication to the remote machine " + sshHost + " succeeded")
    boolean ptimestamp = false
    //exec 'scp -t sshRemoteFile' remotely
    sshRemoteFile = sshRemoteFile.replace("'", "'\"'\"'")
    sshRemoteFile = "'" + sshRemoteFile + "'"
    String command = "scp " + (ptimestamp ? "-p" :"") +" -t " + sshRemoteFile
    Channel channel = session.openChannel("exec")
    ((ChannelExec)channel).setCommand(command)
    // get I/O streams for remote scp
    OutputStream out=channel.getOutputStream()
    InputStream inputStream=channel.getInputStream()
    channel.connect()
    if(checkAck(inputStream)!=0){
        System.exit(0)
    }
    File _sshLocalFile = new File(sshLocalFile)
    if(ptimestamp){
        command="T "+(_sshLocalFile.lastModified()/1000) + " 0"
        // The access time should be sent here,
        // but it is not accessible with JavaAPI ;-<
        command += (" "+(_sshLocalFile.lastModified()/1000) + " 0\n")
        println command
        out.write(command.getBytes())
        out.flush()
        if(checkAck(inputStream)!=0){
            System.exit(0)
        }
    }
    //send "C0644 filesize filename", where filename should not include '/'
    long filesize=_sshLocalFile.length()
    command = "C0644 " + filesize + " "
    if(sshLocalFile.lastIndexOf('/') > 0){
        command += sshLocalFile.substring(sshLocalFile.lastIndexOf('/') + 1)
    }
    else{
        command += sshLocalFile
    }
    command += "\n"
    out.write(command.getBytes())
    out.flush()
    if(checkAck(inputStream)!=0){
        System.exit(0)
    }
    // send a content of sshLocalFile
    fis=new FileInputStream(sshLocalFile)
    byte[] buf=new byte[1024]
    while(true){
        int len=fis.read(buf, 0, buf.length)
        if(len<=0) break
        out.write(buf, 0, len)
    }
    fis.close()
    fis=null
    buf[0]=0
    out.write(buf, 0, 1)
    out.flush()
    if(checkAck(inputStream)!=0){
        System.exit(0)
    }
    out.close()
    channel.disconnect()
    // Execute the script on the remote machine
    channel = session.openChannel("exec")
    ((ChannelExec)channel).setCommand("chmod +x " + sshRemoteFile + " && ./" + sshRemoteFile)
    channel.setInputStream(null)
    ((ChannelExec)channel).setErrStream(System.err)
    inputStream = channel.getInputStream()
    channel.connect()
    byte[] tmp=new byte[1024]
    while(true){
         while(inputStream.available()>0){
             int i=inputStream.read(tmp, 0, 1024)
             if(i<0)break;
             print(new String(tmp, 0, i))
         }
         if(channel.isClosed()){
             if(inputStream.available()>0) continue; 
            println("exit-status: " + channel.getExitStatus());
             break;
         }
         try{Thread.sleep(1000);}catch(Exception ee){}
    }
    channel.disconnect()
    session.disconnect()
}
catch(Exception e){
      throw new RuntimeException(e)
}

static int checkAck(InputStream inputStream) throws IOException{
    int b=inputStream.read()
    // b may be 0 for success,
    //          1 for error,
    //          2 for fatal error,
    //          -1
    if(b==0) return b
    if(b==-1) return b

    if(b==1 || b==2){
        StringBuffer sb=new StringBuffer()
        int c=inputStream.read()
        sb.append((char)c)
        while(c!='\n') {
            c=inputStream.read()
            sb.append((char)c)
        }
        if(b==1){ // error
            print(sb.toString())
        }
        if(b==2){ // fatal error
            print(sb.toString())
        }
    }
    return b;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            149.6875
        </positionTop>
        <positionLeft>
            336.171875
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2146px;
            height:2788px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-144.6875px;left:-331.171875px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_13" style="top: 149.688px; left: 336.172px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png" width="20px">&nbsp;<span class="name">remote_script_execution_with_ssh</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 420px; top: 180px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>