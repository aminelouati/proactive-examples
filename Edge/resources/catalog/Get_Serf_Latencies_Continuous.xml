<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Get_Serf_Latencies_Continuous" projectName="Serf" tags="Controls,Get started,Building blocks" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="numberEdges" value="4"  description="Indicates the number of Edge nodes added to the RM. Each node should have a &quot;Edge#i&quot; token, where these tokens are unique to one node."  advanced="false" hidden="false"/>
  </variables>
  <description>
    <![CDATA[ Using the gossiping found in Serf, this task returns an estimation of all the internode latencies ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="it-edge-applications"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/serf.png"/>
    <info name="NODE_ACCESS_TOKEN" value="Edge#0"/>
    <info name="group" value="public-objects"/>
    <info name="Documentation" value="user/ProActiveUserGuide.html#_loop"/>
  </genericInformation>
  <taskFlow>
    <task name="wait_for_signals"




    fork="true">
      <description>
        <![CDATA[ A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then loops until one signal among those specified is received by the job. ]]>
      </description>
      <variables>
        <variable name="SIGNALS" value="stop, kill" inherited="false"  description="List of comma-separated signals expected by this task."  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/serf.png"/>
        <info name="TASK.DOCUMENTATION" value="user/ProActiveUserGuide.html#_task_signal_api"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/signal/resources/check_and_remove_many_signals/raw" language="groovy">
            <arguments>
              <argument value="${SIGNALS}"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="wait_for_signals">
          <script>
            <code language="groovy">
              <![CDATA[
// A function to get the latency using serf
def getLatency(i,j){
def command="serf rtt Edge#"+i+" Edge#"+j
def sout = new StringBuilder(), serr = new StringBuilder()
def proc = command.execute()
proc.consumeProcessOutput(sout, serr)
proc.waitForOrKill(1000)
def str ="$sout".toString()
Integer reteries=0
while (str.equals("")) {
    reteries+=1
    println command
	println "StdOut: $sout"
	println "Stderror: $serr"
    sleep(500)
    proc.consumeProcessOutput(sout, serr)
    proc.waitForOrKill(1000)
    str ="$sout".toString()
    if (reteries>4){
        println "the maximum number of reteries was reached"
        return "0"
    }
}
str = str.split(' ')[5]
return str
}
// a function to pretty print a line
def printLine(arr,num){
    line=""
    for(int i = 0;i<num;i++){
        line+=arr[i]+"\t"
    }
    println line.expand(10)
}
// a function to pretty print the latency map
def prettyPrint(array,num) {
    List<String> arr = new ArrayList<>()
	arr.add("XXXXXX")
    for(int i = 0;i<num;i++) {
		arr.add("Edge#"+i)
    }
    printLine(arr,num +1)
    for(int i = 0;i<num;i++){
        arr = new ArrayList<>()
        arr.add("Edge#"+i)
        for(int j = 0;j<num;j++){
            arr.add(array[i][j])
        }
    	 printLine(arr,num +1)
    }
}
//Global variables
def num=variables.get("numberEdges") as int
array = new String [num][num]
//Main
if (result!=null){
    loop = false
} else {
    for(int i = 0;i<num;i++) {
    for(int j = 0;j<num;j++) {
        if (i<=j){ array [i][j] = getLatency(j,i)}
        else { array [i][j] = getLatency(j,i)}
    	}
	}
    println "The Latency map:"
	prettyPrint(array,num)
    loop = "* * * * *"
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            193.234375
        </positionTop>
        <positionLeft>
            559
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2725px;
            height:3120px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-188.234375px;left:-554px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_ active-task" id="jsPlumb_1_10" style="top: 193.25px; left: 559px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then loops until one signal among those specified is received by the job."><img src="/automation-dashboard/styles/patterns/img/wf-icons/serf.png" width="20px">&nbsp;<span class="name">wait_for_signals</span></a></div><svg style="position:absolute;left:646.0266769263776px;top:142.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_18" style="position: absolute; transform: translate(-50%, -50%); left: 658px; top: 212.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 602.5px; top: 223px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 656px; top: 183px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 656px; top: 223px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>