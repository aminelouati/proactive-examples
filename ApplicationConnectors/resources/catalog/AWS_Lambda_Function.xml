<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="AWS_Lambda_Function" projectName="Cloud Services"  priority="normal" tags="Lambda,Serverless,AWS,Cloud" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="USERNAME" value="my_user" model="PA:NOT_EMPTY_STRING" description="Specify the username of the system account under which the command will run" group="User Authentication" advanced="true" hidden="false"/>
    <variable name="PASSWORD" value="my_pwd" model="PA:NOT_EMPTY_STRING" description="Specify the username of the system account under which the command will run" group="User Authentication" advanced="true" hidden="false"/>
    <variable name="PROFILE" value="default" model="" description="Specify the profile to use from the credential file." group="Lambda Authentication" advanced="false" hidden="false"/>
    <variable name="REGION" value="eu-west-3" model="" description="Specify the region to use in your command." group="Lambda Authentication" advanced="false" hidden="false"/>
    <variable name="FUNCTION_NAME" value="my_lambda_function" model="NOT_EMPTY_STRING" description="The name of the Lambda function, version, or alias." group="Operation Parameters" advanced="false" hidden="false"/>
    <variable name="FUNCTION_QUALIFIER" value="" model="" description="Specify a version or alias to invoke a published version of the function." group="Operation Parameters" advanced="false" hidden="false"/>
    <variable name="EXECUTION_MODE" value="containerized" model="PA:LIST(native,containerized)" description="Specify the execution mode. The native execution mode requires a preliminary installation of the AWS CLI tools on every machine where the operation will run. The containerized mode requires a preliminary installation of Docker on every machine where the operation will run." group="Execution Environment" advanced="false" hidden="false"/>
  </variables>
  <description>
    <![CDATA[ AWS enables you to run code without the need to provision or manage servers, and you only pay for the computing time you use. The AWS Lambda Connector provides you the ability to interact with your Lambda functions provisioned on AWS. It allows you to manage or use the function's response payload in an effective manner.
Before you can run this connector, you need to have an AWS IAM credentials and to know the region where the AWS Lambda function is located. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="it-application-connectors"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/lambda.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="AWS_Lambda_Invoke_Function"
    preciousResult="true"
    fork="true"
    runAsMe="true" >
      <description>
        <![CDATA[ A task that invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or asynchronously. To invoke a function asynchronously, set InvocationType to Event . ]]>
      </description>
      <variables>
        <variable name="INVOCATION_TYPE" value="RequestResponse" inherited="false" model="PA:LIST(Event,RequestResponse,DryRun)" description="Specify the way to invoke the lambda function." group="Input Data" advanced="false" hidden="false"/>
        <variable name="PAYLOAD" value="{&quot;key&quot;: &quot;value&quot;}" inherited="false" model="PA:JSON?" description="The JSON that you want to provide to your Lambda function as input." group="Input Data" advanced="false" hidden="false"/>
        <variable name="OPTIONS" value="" inherited="false"  description="Specify the Lambda operation options that can be added to the command execution." group="Input Data" advanced="false" hidden="false"/>
        <variable name="OUTFILE" value="response.json" inherited="false"  description="Filename where the operation response content will be saved. For the invoke operation, the value is mandatory." group="Output Data" advanced="false" hidden="false"/>
        <variable name="LOGTYPE" value="None" inherited="false" model="PA:LIST(Tail,None)" description="Set to Tail to include the execution log in the response. Applies to synchronously invoked functions only." group="Output Data" advanced="false" hidden="false"/>
        <variable name="ERROR_HANDLING" value="true" inherited="false" model="PA:BOOLEAN" description="If present, indicates that an error occurred during function execution. Details about the error are included in the response payload." group="Output Data" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/lambda.png"/>
        <info name="RUNAS_USER" value="$USERNAME"/>
        <info name="RUNAS_PWD" value="$PASSWORD"/>
        <info name="Task.Documentation" value="https://docs.aws.amazon.com/cli/latest/reference/lambda/invoke.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
EXECUTION_MODE="$variables_EXECUTION_MODE"
PROFILE="$variables_PROFILE"
REGION="$variables_REGION"
FUNCTION_NAME="$variables_FUNCTION_NAME"
QUALIFIER=$variables_FUNCTION_QUALIFIER
INVOCATION_TYPE="$variables_INVOCATION_TYPE"
PAYLOAD=$variables_PAYLOAD
OPTIONS="$variables_OPTIONS"
OUTFILE="$variables_OUTFILE"


# Check whether PROFILE and REGION have been well entered
if [ \( ! -z "$PROFILE" -a -z "$REGION" \) -o \( -z "$PROFILE" -a ! -z "$REGION" \) ]; then
    echo ERROR: "$variables_PA_JOB_NAME"_PROFILE and "$variables_PA_JOB_NAME"_REGION are used in junction. They should be either both entered or both blank.
    exit 1
fi

if [ "$EXECUTION_MODE" == "native" ]; then
    COMMAND="aws lambda invoke --function-name $FUNCTION_NAME --invocation-type $INVOCATION_TYPE $OPTIONS $OUTFILE"
else
	COMMAND="docker run --rm -i -v ~/.aws:/root/.aws -v $localspace:/aws amazon/aws-cli lambda invoke --function-name $FUNCTION_NAME --invocation-type $INVOCATION_TYPE $OPTIONS $OUTFILE"
fi

if [ ! -z "$PROFILE" -a ! -z "$REGION" ]; then
    COMMAND="$COMMAND --profile $PROFILE --region $REGION"
fi

if [ ! -z "$QUALIFIER" ]; then
    COMMAND="$COMMAND --qualifier $QUALIFIER"
fi

if [ ! -z "$PAYLOAD" ]; then
    COMMAND="$COMMAND --cli-binary-format raw-in-base64-out --payload '$PAYLOAD'"
fi
echo $COMMAND

COMMAND_STATUS=$(eval $COMMAND 2>&1)
echo $COMMAND_STATUS

ERROR='FunctionError'
if [[ "$COMMAND_STATUS" == *"$ERROR"* ]]; then
	echo An error occurred during function execution. Details about the error are included in the response payload
    exit 1
fi
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.net.MediaType

fileName = variables.get("OUTFILE")
file = new File(fileName)
print(file.text)
result = file.getBytes()
resultMetadata.put("file.name", fileName)
resultMetadata.put("content.type", MediaType.JSON_UTF_8.toString())
]]>
          </code>
        </script>
      </post>
      <outputFiles>
        <files  includes="$OUTFILE" accessMode="transferToUserSpace"/>
      </outputFiles>
      <metadata>
        <positionTop>
            220.810546875
        </positionTop>
        <positionLeft>
            423.984375
        </positionLeft>
      </metadata>
    </task>
    <task name="AWS_Lambda_Get_Alias"
    fork="true"
    runAsMe="true" >
      <description>
        <![CDATA[ A task that returns details about a Lambda function alias ]]>
      </description>
      <variables>
        <variable name="NAME" value="alias_name" inherited="false" model="PA:NOT_EMPTY_STRING" description="The name of the alias" group="Input Data" advanced="false" hidden="false"/>
        <variable name="OPTIONS" value="" inherited="false"  description="Specify the Lambda operation options that can be added to the command execution." group="Input Data" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/lambda.png"/>
        <info name="RUNAS_USER" value="$USERNAME"/>
        <info name="RUNAS_PWD" value="$PASSWORD"/>
        <info name="Task.Documentation" value="https://docs.aws.amazon.com/cli/latest/reference/lambda/get-alias.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
EXECUTION_MODE="$variables_EXECUTION_MODE"
PROFILE="$variables_PROFILE"
REGION="$variables_REGION"
FUNCTION_NAME="$variables_FUNCTION_NAME"
NAME="$variables_NAME"
OPTIONS="$variables_OPTIONS"

# Check whether PROFILE and REGION have been well entered
if [ \( ! -z "$PROFILE" -a -z "$REGION" \) -o \( -z "$PROFILE" -a ! -z "$REGION" \) ]; then
    echo ERROR: "$variables_PA_JOB_NAME"_PROFILE and "$variables_PA_JOB_NAME"_REGION are used in junction. They should be either both entered or both blank.
    exit 1
fi

if [ "$EXECUTION_MODE" == "native" ]; then
    COMMAND="aws lambda get-alias --function-name $FUNCTION_NAME --name $NAME $OPTIONS"
else
	COMMAND="docker run --rm -i -v ~/.aws:/root/.aws -v $localspace:/aws amazon/aws-cli lambda get-alias --function-name $FUNCTION_NAME --name $NAME $OPTIONS"
fi

if [ ! -z "$PROFILE" -a ! -z "$REGION" ]; then
    COMMAND="$COMMAND --profile  $PROFILE --region $REGION"
fi

echo $COMMAND

COMMAND_STATUS=$(eval $COMMAND 2>&1)

echo $COMMAND_STATUS
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            221.533203125
        </positionTop>
        <positionLeft>
            673.203125
        </positionLeft>
      </metadata>
    </task>
    <task name="AWS_Lambda_Get_Function"
    fork="true"
    runAsMe="true" >
      <description>
        <![CDATA[ A task that returns information about the function or function version, with a link to download the deployment package that's valid for 10 minutes. If  you specify a function version, only details that are specific to that version are returned. ]]>
      </description>
      <variables>
        <variable name="OPTIONS" value="--no-paginate" inherited="false"  description="Specify the Lambda operation options that can be added to the command execution." group="Input Data" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/lambda.png"/>
        <info name="RUNAS_USER" value="$USERNAME"/>
        <info name="RUNAS_PWD" value="$PASSWORD"/>
        <info name="Task.Documentation" value="https://docs.aws.amazon.com/lambda/latest/dg/API_GetFunction.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
EXECUTION_MODE="$variables_EXECUTION_MODE"
PROFILE="$variables_PROFILE"
REGION="$variables_REGION"
FUNCTION_NAME="$variables_FUNCTION_NAME"
QUALIFIER=$variables_FUNCTION_QUALIFIER
OPTIONS="$variables_OPTIONS"

# Check whether PROFILE and REGION have been well entered
if [ \( ! -z "$PROFILE" -a -z "$REGION" \) -o \( -z "$PROFILE" -a ! -z "$REGION" \) ]; then
    echo ERROR: "$variables_PA_JOB_NAME"_PROFILE and "$variables_PA_JOB_NAME"_REGION are used in junction. They should be either both entered or both blank.
    exit 1
fi

if [ "$EXECUTION_MODE" == "native" ]; then
    COMMAND="aws lambda get-function --function-name $FUNCTION_NAME $OPTIONS"
else
	COMMAND="docker run --rm -i -v ~/.aws:/root/.aws -v $localspace:/aws amazon/aws-cli lambda get-function --function-name $FUNCTION_NAME $OPTIONS"
fi

if [ ! -z "$PROFILE" -a ! -z "$REGION" ]; then
    COMMAND="$COMMAND --profile  $PROFILE --region $REGION"
fi

if [ ! -z "$QUALIFIER" ]; then
    COMMAND="$COMMAND --qualifier $QUALIFIER"
fi

echo $COMMAND

COMMAND_STATUS=$(eval $COMMAND 2>&1)

echo $COMMAND_STATUS
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            219.55078125
        </positionTop>
        <positionLeft>
            190.29296875
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2688px;
            height:3580px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-214.55078125px;left:-185.29296875px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_19" style="top: 220.812px; left: 423.992px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or asynchronously. To invoke a function asynchronously, set InvocationType to Event ."><img src="/automation-dashboard/styles/patterns/img/wf-icons/lambda.png" width="20px">&nbsp;<span class="name">AWS_Lambda_Invoke_Function</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class=""></i></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_22" style="top: 221.539px; left: 673.203px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that returns details about a Lambda function alias"><img src="/automation-dashboard/styles/patterns/img/wf-icons/lambda.png" width="20px">&nbsp;<span class="name">AWS_Lambda_Get_Alias</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class=""></i></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_25" style="top: 219.554px; left: 190.297px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that returns information about the function or function version, with a link to download the deployment package that's valid for 10 minutes. If  you specify a function version, only details that are specific to that version are returned."><img src="/automation-dashboard/styles/patterns/img/wf-icons/lambda.png" width="20px">&nbsp;<span class="name">AWS_Lambda_Get_Function</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class=""></i></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 505.5px; top: 251px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 739.5px; top: 252px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 265px; top: 250px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>